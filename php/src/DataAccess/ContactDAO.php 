<?php
class ContactDAO {
    private $conn;
    private $table_contacts = "contacts";
    private $table_phone_numbers = "phone_numbers";

    public function __construct($db) {
        $this->conn = $db;
    }

    public function createContact($firstName, $lastName, $email, $phoneNumbers = []) {
        // Check if email already exists
        $query = "SELECT id FROM " . $this->table_contacts . " WHERE email = :email LIMIT 1";
        $stmt = $this->conn->prepare($query);
        $stmt->bindParam(':email', $email);
        $stmt->execute();
        if ($stmt->rowCount() > 0) {
            return ['status' => 'error', 'message' => 'Email already exists.'];
        }

        // Insert contact
        $query = "INSERT INTO " . $this->table_contacts . " (first_name, last_name, email) VALUES (:first_name, :last_name, :email)";
        $stmt = $this->conn->prepare($query);

        $stmt->bindParam(':first_name', $firstName);
        $stmt->bindParam(':last_name', $lastName);
        $stmt->bindParam(':email', $email);

        if ($stmt->execute()) {
            $contactId = $this->conn->lastInsertId();
            // Insert phone numbers
            if (!empty($phoneNumbers)) {
                $phoneQuery = "INSERT INTO " . $this->table_phone_numbers . " (contact_id, phone_number) VALUES (:contact_id, :phone_number)";
                $phoneStmt = $this->conn->prepare($phoneQuery);
                foreach ($phoneNumbers as $phoneNumber) {
                    $phoneStmt->bindParam(':contact_id', $contactId);
                    $phoneStmt->bindParam(':phone_number', $phoneNumber);
                    $phoneStmt->execute();
                }
            }
            return ['status' => 'success', 'contact_id' => $contactId];
        }
        return ['status' => 'error', 'message' => 'Failed to create contact.'];
    }

    public function getAllContacts() {
        $query = "
            SELECT
                c.id, c.first_name, c.last_name, c.email,
                GROUP_CONCAT(pn.phone_number SEPARATOR ',') as phone_numbers
            FROM
                " . $this->table_contacts . " c
            LEFT JOIN
                " . $this->table_phone_numbers . " pn ON c.id = pn.contact_id
            GROUP BY
                c.id
            ORDER BY
                c.first_name ASC";

        $stmt = $this->conn->prepare($query);
        $stmt->execute();

        $contacts = [];
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $row['phone_numbers'] = $row['phone_numbers'] ? explode(',', $row['phone_numbers']) : [];
            $contacts[] = $row;
        }
        return $contacts;
    }

    public function deleteContact($id) {
        // Deleting from contacts will cascade delete from phone_numbers due to FOREIGN KEY ON DELETE CASCADE
        $query = "DELETE FROM " . $this->table_contacts . " WHERE id = :id";
        $stmt = $this->conn->prepare($query);
        $stmt->bindParam(':id', $id);

        if ($stmt->execute()) {
            if ($stmt->rowCount() > 0) {
                return ['status' => 'success', 'message' => 'Contact deleted.'];
            } else {
                return ['status' => 'error', 'message' => 'Contact not found.'];
            }
        }
        return ['status' => 'error', 'message' => 'Failed to delete contact.'];
    }
}
?>